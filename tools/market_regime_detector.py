#!/usr/bin/env python3
"""
D√©tecteur de R√©gime de March√© pour Strat√©gie SMC
Analyse les conditions actuelles et recommande la configuration optimale
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import os

def detect_market_regime_live(symbol="USD/JPY", lookback_days=45):
    """D√©tecte le r√©gime de march√© actuel et recommande la configuration"""
    
    print(f"üîç D√âTECTION DE R√âGIME DE MARCH√â - {symbol}")
    print("=" * 50)
    print(f"üìÖ Analyse sur {lookback_days} derniers jours")
    print()
    
    # Charger les donn√©es r√©centes
    ltf_file = f"{symbol.replace('/', '')}_15min.csv"
    
    if not os.path.exists(ltf_file):
        print(f"‚ùå Donn√©es non disponibles. Lancez d'abord un backtest r√©cent.")
        return None
    
    df = pd.read_csv(ltf_file)
    df['time'] = pd.to_datetime(df['time'])
    
    # Prendre les donn√©es r√©centes
    recent_data = df.tail(lookback_days * 96)  # 96 bougies 15min par jour
    
    if len(recent_data) < 100:
        print("‚ùå Pas assez de donn√©es pour l'analyse")
        return None
    
    # 1. ANALYSE DE TENDANCE
    start_price = recent_data['close'].iloc[0]
    end_price = recent_data['close'].iloc[-1]
    total_move_pct = ((end_price - start_price) / start_price) * 100
    
    # 2. ANALYSE DE VOLATILIT√â
    if 'ATR' in recent_data.columns:
        current_atr = recent_data['ATR'].iloc[-10:].mean()  # ATR des 10 derni√®res bougies
        avg_atr = recent_data['ATR'].mean()
        volatility_ratio = current_atr / avg_atr if avg_atr > 0 else 1.0
    else:
        volatility_ratio = 1.0
    
    # 3. ANALYSE DE RANGE
    period_high = recent_data['high'].max()
    period_low = recent_data['low'].min()
    range_pct = ((period_high - period_low) / start_price) * 100
    
    # 4. CALCUL DU SCORE SMC
    smc_score = 0
    factors = []
    
    # Facteur tendance
    if abs(total_move_pct) > 5:
        smc_score += 3
        factors.append(f"‚úÖ Tendance forte ({total_move_pct:+.1f}%)")
    elif abs(total_move_pct) > 2:
        smc_score += 2
        factors.append(f"‚úÖ Tendance mod√©r√©e ({total_move_pct:+.1f}%)")
    else:
        factors.append(f"‚ùå Faible tendance ({total_move_pct:+.1f}%)")
    
    # Facteur volatilit√©
    if volatility_ratio > 1.2:
        smc_score += 2
        factors.append(f"‚úÖ Volatilit√© √©lev√©e (ATR +{(volatility_ratio-1)*100:.0f}%)")
    elif volatility_ratio > 0.8:
        smc_score += 1
        factors.append(f"‚öñÔ∏è Volatilit√© normale")
    else:
        factors.append(f"‚ùå Faible volatilit√© (ATR {(volatility_ratio-1)*100:+.0f}%)")
    
    # Facteur range
    if range_pct > 8:
        smc_score += 2
        factors.append(f"‚úÖ Range important ({range_pct:.1f}%)")
    elif range_pct > 4:
        smc_score += 1
        factors.append(f"‚úÖ Range suffisant ({range_pct:.1f}%)")
    else:
        factors.append(f"‚ùå Range limit√© ({range_pct:.1f}%)")
    
    # 5. CLASSIFICATION DU R√âGIME
    if smc_score >= 6:
        regime = "EXCELLENT"
        config = "AGGRESSIF"
        risk_per_trade = 2.5
        rr_target = 2.0
        rr_alt = 1.6
    elif smc_score >= 4:
        regime = "BON"
        config = "OPTIMAL"
        risk_per_trade = 2.0
        rr_target = 1.6
        rr_alt = 1.3
    elif smc_score >= 2:
        regime = "MOD√âR√â"
        config = "CONSERVATEUR"
        risk_per_trade = 1.5
        rr_target = 1.4
        rr_alt = 1.2
    else:
        regime = "DIFFICILE"
        config = "D√âFENSIF"
        risk_per_trade = 1.0
        rr_target = 1.3
        rr_alt = 1.1
    
    # 6. AFFICHAGE DES R√âSULTATS
    print("üìä ANALYSE DU MARCH√â")
    print("-" * 25)
    print(f"Mouvement Total: {total_move_pct:+.2f}%")
    print(f"Range de P√©riode: {range_pct:.2f}%")
    print(f"Ratio Volatilit√©: {volatility_ratio:.2f}")
    print()
    
    print("üéØ FACTEURS SMC")
    print("-" * 15)
    for factor in factors:
        print(f"  {factor}")
    print()
    
    print("üèÜ √âVALUATION")
    print("-" * 15)
    print(f"Score SMC: {smc_score}/7")
    print(f"R√©gime: {regime} pour SMC")
    print(f"Configuration: {config}")
    print()
    
    print("‚öôÔ∏è CONFIGURATION RECOMMAND√âE")
    print("-" * 35)
    print(f"--risk_per_trade {risk_per_trade}")
    print(f"--rr_target {rr_target}")
    print(f"--rr_target_alt {rr_alt}")
    
    if smc_score >= 4:
        print("--atr_min_pips 0.25")
        print("--momentum_min_body_atr 0.08")
        print("--confluence_min 1")
    else:
        print("--atr_min_pips 0.4")
        print("--momentum_min_body_atr 0.15")
        print("--confluence_min 2")
    
    print()
    
    # 7. RECOMMANDATIONS
    print("üí° RECOMMANDATIONS")
    print("-" * 20)
    
    if smc_score >= 6:
        print("üöÄ Conditions EXCELLENTES - Maximiser l'exposition")
        print("   ‚Ä¢ Utiliser la configuration agressive")
        print("   ‚Ä¢ Surveiller les breakouts de volatilit√©")
        print("   ‚Ä¢ Consid√©rer l'ajout de positions")
    elif smc_score >= 4:
        print("‚úÖ Conditions BONNES - Configuration standard")
        print("   ‚Ä¢ Utiliser la configuration optimale test√©e")
        print("   ‚Ä¢ Maintenir la discipline de risk management")
        print("   ‚Ä¢ Surveiller l'√©volution du r√©gime")
    elif smc_score >= 2:
        print("‚ö†Ô∏è Conditions MOD√âR√âES - Prudence recommand√©e")
        print("   ‚Ä¢ R√©duire l'exposition")
        print("   ‚Ä¢ Augmenter la s√©lectivit√© (confluence_min 2)")
        print("   ‚Ä¢ Surveiller les signaux de changement de r√©gime")
    else:
        print("üõë Conditions DIFFICILES - √âviter le trading")
        print("   ‚Ä¢ Suspendre temporairement la strat√©gie")
        print("   ‚Ä¢ Attendre un changement de r√©gime")
        print("   ‚Ä¢ Utiliser la p√©riode pour l'analyse et l'optimisation")
    
    return {
        'regime': regime,
        'score': smc_score,
        'config': config,
        'risk_per_trade': risk_per_trade,
        'rr_target': rr_target,
        'rr_alt': rr_alt,
        'total_move_pct': total_move_pct,
        'range_pct': range_pct,
        'volatility_ratio': volatility_ratio
    }

def generate_config_command(analysis_result, symbol="USD/JPY"):
    """G√©n√®re la commande compl√®te avec la configuration recommand√©e"""
    
    if analysis_result is None:
        return None
    
    # Dates pour test (derniers 30 jours)
    end_date = datetime.now().strftime("%Y-%m-%d")
    start_date = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
    
    cmd = f"""python smc_backtest_v2.5_FINAL_OPTIMIZED.py \\
--api-key YOUR_API_KEY \\
--symbol "{symbol}" \\
--ltf 15min \\
--htf 4h \\
--start {start_date} \\
--end {end_date} \\
--capital 100000 \\
--risk_per_trade {analysis_result['risk_per_trade']} \\
--rr_target {analysis_result['rr_target']} \\
--rr_target_alt {analysis_result['rr_alt']} \\"""
    
    if analysis_result['score'] >= 4:
        cmd += """--atr_min_pips 0.25 \\
--momentum_min_body_atr 0.08 \\
--confluence_min 1 \\"""
    else:
        cmd += """--atr_min_pips 0.4 \\
--momentum_min_body_atr 0.15 \\
--confluence_min 2 \\"""
    
    cmd += """--auto-bias \\
--require_confluence \\
--forbidden_hours_utc "0,1,2,3,4,5,6,7,20,21,22,23\""""
    
    return cmd

if __name__ == "__main__":
    print("üî¨ D√âTECTEUR DE R√âGIME DE MARCH√â SMC")
    print("=" * 50)
    
    # Analyser USD/JPY
    analysis = detect_market_regime_live("USD/JPY")
    
    if analysis:
        print("\n" + "=" * 50)
        print("üìù COMMANDE RECOMMAND√âE")
        print("=" * 50)
        cmd = generate_config_command(analysis)
        if cmd:
            print(cmd)
    
    print("\n" + "=" * 50)
    print("‚ÑπÔ∏è Utilisez ce script r√©guli√®rement pour adapter votre strat√©gie aux conditions de march√© !")
